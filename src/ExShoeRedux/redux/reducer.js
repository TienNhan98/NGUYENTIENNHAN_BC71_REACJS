import { dataShoe } from "../DataShoe";
import { ADD_SHOE, CHANGE, DELETE } from "./const";
let initialState = {
  cart: [],
  listShoe: dataShoe,
};

export let shoeReducer = (state = initialState, action) => {
  switch (action.type) {
    case ADD_SHOE: {
      let dataShoe = action.payload;
      //   console.log("üöÄ ~ shoeReducer ~ shoe:", shoe);
      // t√¨m sp ƒë√£ c√≥ trong gi·ªè h√†ng ch∆∞a. findIndex
      let cloneCart = [...state.cart];
      // console.log("üöÄ ~ ExShoe ~ cloneCart:", cloneCart);
      let index = cloneCart.findIndex(
        (itemShoe) => itemShoe.id === dataShoe.id
      );
      // findIndex: n·∫øu kh√¥ng t√¨m th·∫•y => tr·∫£ v·ªÅ -1 n√™n
      //tr∆∞·ªùng h·ª£p 1: sp ƒë√£ c√≥ trong gi·ªè h√†ng => tƒÉng s·ªë l∆∞·ª£ng => Kh√¥ng push
      if (index !== -1) {
        cloneCart[index].total++;
      } // findIndex: n·∫øu t√¨m th·∫•y =>
      else {
        // tr∆∞·ªùng h·ª£p 2: sp ch∆∞a c√≥ trong gi·ªè h√†ng => th√™m v√†o gi·ªè h√†ng => push
        cloneCart.push({ ...dataShoe, total: 1 });
      }
      // update state => render l·∫°i ~~ ƒë√£ thay th·∫ø cho this.setState c≈©
      return { ...state, cart: cloneCart };
    }
    case DELETE: {
      let idShoe = action.payload;
      //   console.log("üöÄ ~ shoeReducer ~ idShoe:", idShoe);
      let cloneCart = [...state.cart];
      let newCart = cloneCart.filter((shoe) => shoe.id !== idShoe);
      return { ...state, cart: newCart };
    }
    case CHANGE: {
      let { idShoe, option } = action.payload;
      // T√¨m v·ªã tr√≠
      let cloneCart = [...state.cart];
      let index = cloneCart.findIndex((itemShoe) => itemShoe.id === idShoe);
      //object.total + v·ªõi c√°i option
      cloneCart[index].total += option;
      if (cloneCart[index].total === 0) {
        alert("B√†n mu·ªën x√≥a s·∫£n ph·∫©m n√†y ra kh·ªèi gi·ªè h√†ng ?");
        cloneCart.splice(index, 1);
      }
      return { ...state, cart: cloneCart };
    }
    default:
      return state;
  }
};
